#summary Interface specification for Intents and ContentProviders
#labels Featured

==2.x Charts==

===Data type===

The [http://developer.android.com/reference/android/content/ContentProvider.html#getType%28android.net.Uri%29 getType()] method of your Content Provider should respond with the string:

`vnd.android.cursor.dir/vnd.com.googlecode.chartdroid.graphable`

===Content Provider Columns===

Your Content Provider should respond to three types of queries:
  * `data`
  * `meta`
  * `axes`

When displaying a chart, these strings will be appended to the source Uri as a "callback" to retrieve the various chart data. Therefore, a Content Provider should examine the last path component of the Uri and serve the appropriate columns below.

*Note:* The data to chart may be generated dynamically in the client by populating a [http://developer.android.com/reference/android/database/MatrixCursor.html MatrixCursor].  If your data already exists in an SQLite-backed database, it is simple to translate the column names.  Use a query such as:
{{{
String[] projection = new String[] {
    "ROWID AS " + BaseColumns._ID,    // ROWID is the implicit Primary Key generator in SQLite
    MY_AXIS_INDEX_COLUMN + " AS " + "COLUMN_AXIS_INDEX",
    MY_SERIES_INDEX_COLUMN + " AS " + "COLUMN_SERIES_INDEX",
    ...
};

db.query(MY_TABLE, projection, ...);
}}}

Here is an example results table that could be produced in response to a "data" query:

|| `_id` || `COLUMN_AXIS_INDEX` || `COLUMN_SERIES_INDEX` || `COLUMN_DATUM_VALUE` || `COLUMN_DATUM_LABEL` ||
|| 3546 || 0 || 0 || 17 || "beef" ||
|| 3547 || 1 || 0 || 4 || `null` ||
|| 3548 || 0 || 0 || 24 || "chicken" ||
|| 3549 || 1 || 0 || 6 || `null` ||
|| 3550 || 0 || 0 || 13 || "pork" ||
|| 3551 || 1 || 0 || 8 || `null` ||
|| 3552 || 0 || 1 || 30 || "apples" ||
|| 3553 || 1 || 1 || 10 || `null` ||
|| 3554 || 0 || 1 || 12 || "oranges" ||
|| 3555 || 1 || 1 || 4 || `null` ||
|| 3556 || 0 || 1 || 5 || "pears" ||
|| 3557 || 1 || 1 || 2 || `null` ||

This dataset could be plotted on a line chart with two series of four labeled points apiece.  It could also be plotted in a donut chart, where values from the second axis would be ignored.

===="data" Columns====

Each datum component must be identified by axis and series.  The axis and series numbering scheme is arbitrary.  Datum component values will be interpreted as `double` type.  If multiple axes are specified, datum components from each axis are combined in the order they appear to form a complete multi-dimensional datum (e.g. a 2D point).

Datum labels may be specified or left `null`.  If a label is specified (non-null) for components of the same datum in multiple axes, the label corresponding to the highest axis index will take precedence.

|| *Column name* || *Data type* ||
|| `_id` || `long` ||
|| `COLUMN_AXIS_INDEX` || `int` ||
|| `COLUMN_SERIES_INDEX` || `int` ||
|| `COLUMN_DATUM_VALUE` || `double` ||
|| `COLUMN_DATUM_LABEL` || `String` ||


===="meta" Columns====
The "meta" query provides labels for each data series.

|| *Column name* || *Data type* ||
|| `_id` || `long` ||
|| `COLUMN_SERIES_LABEL` || `String` ||


===="axes" Columns====
The "axes" query provides labels for each axis.

|| *Column name* || *Data type* ||
|| `_id` || `long` ||
|| `COLUMN_AXIS_LABEL` || `String` ||


==1.x Charts==
===Actions===
  * com.googlecode.chartdroid.intent.action.PLOT
===Categories===
  * com.googlecode.chartdroid.intent.category.PIE_CHART
  * com.googlecode.chartdroid.intent.category.CALENDAR
===Extras===

====Pie Chart====
|| *Key* || *Data type* || *Required? ||
|| `com.googlecode.chartdroid.intent.extra.DATA` || `int[]` || Y ||
|| `com.googlecode.chartdroid.intent.extra.LABELS` || `String[]` || N ||
|| `com.googlecode.chartdroid.intent.extra.COLORS` || `int[]` || N ||
|| `Intent.EXTRA_TITLE` || `String` || N ||